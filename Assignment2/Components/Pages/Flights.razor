@page "/flight"
@using Assignment2.Models;
@using Assignment2.Managers;
@inject IJSRuntime JS

<h1 class="text-center">Flight Finder</h1>

<div class="row">
    <div class="col">
        <p>From</p>
        @if (FlightsManager.AllFrom == null)
        {
            <input placeholder="Loading" />
        }
        else
        {
            <select class="form-control" @bind="FlightsManager.selectedFrom">
                <option value="">-- Departure --</option>
                @foreach (var from in FlightsManager.AllFrom)
                {
                    <option>@from</option>
                }
            </select>
        }
    </div>
    <div class="col">
        <p>To</p>
        @if (FlightsManager.AllTo == null)
        {
            <input placeholder="Loading" />
        }
        else
        {
            <select class="form-control" @bind="FlightsManager.selectedTo">
                <option value="">-- Destination --</option>
                @foreach (var to in FlightsManager.AllTo)
                {
                    <option>@to</option>
                }
            </select>
        }
    </div>
    <div class="col">
        <p>Day</p>
        @if (FlightsManager.AllDay == null)
        {
            <input placeholder="Loading" />
        }
        else
        {
            <select class="form-control" @bind="FlightsManager.selectedDay">
                <option value="">-- Select a Date --</option>
                @foreach (var day in FlightsManager.AllDay)
                {
                    <option>@day</option>
                }
            </select>
        }
    </div>
    <div class="col d-flex flex-column justify-content-end">
        <button class="btn btn-primary" style="width: 200px" @onclick="SearchFlights">Find flights</button>
    </div>
</div>

<div class="row">
    <h2 class="text-center">Flights</h2>
    @if (FlightsManager.Results == null)
    {
        <input placeholder="Loading" />
    }
    else
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Flight Code</th>
                    <th>Airline</th>
                    <th>From</th>
                    <th>To</th>
                    <th>Day</th>
                    <th>Time</th>
                    <th>Seats</th>
                    <th>Cost</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var flight in FlightsManager.pagedFlights)
                {
                    <tr class="@(FlightsManager.SelectedFlight == flight ? "table-primary" : "")" @onclick="() => SelectFlight(flight)">
                        <td>@flight.FlightCode</td>
                        <td>@flight.AirLine</td>
                        <td>@flight.From</td>
                        <td>@flight.To</td>
                        <td>@flight.Day</td>
                        <td>@flight.Time</td>
                        <td>@flight.Seats</td>
                        <td>@flight.Cost</td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="pagination d-flex align-items-center justify-content-end" style="align-content: center">
            <button class="btn btn-primary me-2" @onclick="FlightsManager.PreviousPage" disabled="@(!HasPreviousPage)">Previous</button>
            <span class="me-2">Page @FlightsManager.currentPage of @FlightsManager.totalPages</span>
            <button class="btn btn-primary me-2" @onclick="FlightsManager.NextPage" disabled="@(!HasNextPage)">Next</button>
            <button class="btn btn-primary me-2" @onclick="()=>JumpPage(pageNumber)">Jump To</button>
            <input class="form-control me-2" style="width: 50px; height: 30px; padding: 2px;" placeholder="@FlightsManager.currentPage" @bind-value="@pageNumber" />
        </div>
    }
</div>

<div class="row">
    <h2 class="text-center">Reserve</h2>

    @if (FlightsManager.SelectedFlight != null)
    {
        <p>Flight Code</p>
        <input placeholder="Flight" @bind-value="FlightsManager.SelectedFlight.FlightCode" disabled />
        <p>Airline</p>
        <input placeholder="Airline" @bind-value="FlightsManager.SelectedFlight.AirLine" disabled />
        <p>Day</p>
        <input placeholder="Day" @bind-value="FlightsManager.SelectedFlight.Day" disabled />
        <p>Time</p>
        <input placeholder="Time" @bind-value="FlightsManager.SelectedFlight.Time" disabled />
        <p>Cost</p>
        <input placeholder="0" @bind-value="FlightsManager.SelectedFlight.Cost" disabled />
    }
    else
    {
        <p>Flight Code</p>
        <input placeholder="Flight" disabled />
        <p>Airline</p>
        <input placeholder="Airline" disabled />
        <p>Day</p>
        <input placeholder="Day" disabled />
        <p>Time</p>
        <input placeholder="Time" disabled />
        <p>Cost</p>
        <input placeholder="0" disabled />
    }

    <p>Name</p>
    <input placeholder="Name" @bind-value="currentNamm" />
    <p>Citizenship</p>
    <input placeholder="Citizenship" @bind-value="currentCitizenship" />
</div>

<div class="row d-flex flex-column align-items-center justify-content-center">
    <button class="btn btn-primary text-center" style="width: 200px;" @onclick="ReserveFlight">Reserve</button>
    <p class="text-center">@reservationCode</p>
</div>

@code {

    private static string currentNamm;
    private static string currentCitizenship;

    private static int pageNumber = 0;

    private static string reservationCode = "Reservation Code";

    private bool HasPreviousPage => FlightsManager.currentPage > 1;
    private bool HasNextPage => FlightsManager.currentPage < FlightsManager.totalPages;

    private void SelectFlight(Flight selectedFlight)
    {
        FlightsManager.SelectedFlight = selectedFlight;
    }

    private async void SearchFlights()
    {
        await FlightsManager.FilterFlights();
        StateHasChanged();
    }

    private void JumpPage(int pageNumber)
    {
        if (pageNumber > 0 && pageNumber <= FlightsManager.totalPages)
        {
            FlightsManager.currentPage = pageNumber;
        }
    }

    private async void ReserveFlight()
    {
        try
        {
            if (FlightsManager.SelectedFlight == null)
            {
                await ShowMessage("A reservation is to be made but no flight is selected!");
                throw new Exception("A reservation is to be made but no flight is selected!");
            }
            if (string.IsNullOrEmpty(currentNamm))
            {
                await ShowMessage("The name field is empty!");
                throw new Exception("The name field is empty!");
            }
            if (string.IsNullOrEmpty(currentCitizenship))
            {
                await ShowMessage("The citizenship field is empty!");
                throw new Exception("The citizenship field is empty!");
            }
            // reserve
            reservationCode = ReservationManager.MakeReservation(FlightsManager.SelectedFlight, currentNamm, currentCitizenship);
        }
        catch (Exception e)
        {
            await ShowMessage(e.ToString());
        }
    }

    private async Task ShowMessage(string str)
    {
        await JS.InvokeVoidAsync("showAlert", str);
    }
}